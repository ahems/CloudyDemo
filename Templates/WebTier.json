{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "domainNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "The public DNS name label for the service.  The pattern will follow: <domainNamePrefix>.<region>.cloudapp.azure.com"
            }
        },
        "vmSku": {
            "type": "string",
            "allowedValues": [
                "Standard_F1",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F4",
                "Standard_F4s"
            ],
            "defaultValue": "Standard_F2s",
            "metadata": {
                "description": "VM size for the VM Scale Set + the mgmt VM"
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2016-Datacenter",
            "metadata": {
                "description": "The Windows Server version for the VM. This will pick a fully patched image of this given Windows version"
            }
        },
        "vmssName": {
            "type": "string",
            "metadata": {
                "description": "String used as a base for naming resources (9 characters or less)."
            },
            "maxLength": 9
        },
        "instanceCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Number of VM instances (100 or less)."
            },
            "maxValue": 100
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username on all VMs."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password on all VMs."
            }
        },
        "registrationKey": {
            "type": "securestring",
            "metadata": {
                "description": "Registration key to use to onboard to the Azure Automation DSC pull/reporting server"
            }
        },
        "registrationUrl": {
            "type": "string",
            "metadata": {
                "description": "Registration url of the Azure Automation DSC pull/reporting server"
            }
        },
        "nodeConfigurationName": {
            "type": "string",
            "defaultValue": "MyService.webServer",
            "metadata": {
                "description": "The name of the node configuration, on the Azure Automation DSC pull server, that this node will be configured as"
            }
        },
        "configurationMode": {
            "type": "string",
            "defaultValue": "ApplyAndAutoCorrect",
            "allowedValues": [
                "ApplyOnly",
                "ApplyAndMonitor",
                "ApplyAndAutoCorrect"
            ],
            "metadata": {
                "description": "DSC agent (LCM) configuration mode setting. ApplyOnly, ApplyAndMonitor, or ApplyAndAutoCorrect"
            }
        },
        "configurationModeFrequencyMins": {
            "type": "int",
            "defaultValue": 15,
            "metadata": {
                "description": "DSC agent (LCM) configuration mode frequency setting, in minutes"
            }
        },
        "refreshFrequencyMins": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "DSC agent (LCM) refresh frequency setting, in minutes"
            }
        },
        "rebootNodeIfNeeded": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "DSC agent (LCM) rebootNodeIfNeeded setting"
            }
        },
        "actionAfterReboot": {
            "type": "string",
            "defaultValue": "ContinueConfiguration",
            "allowedValues": [
                "ContinueConfiguration",
                "StopConfiguration"
            ],
            "metadata": {
                "description": "DSC agent (LCM) actionAfterReboot setting. ContinueConfiguration or StopConfiguration"
            }
        },
        "allowModuleOverwrite": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "DSC agent (LCM) allowModuleOverwrite setting"
            }
        },
        "timestamp": {
            "type": "string",
            "defaultValue": "MM/dd/yyyy H:mm:ss tt",
            "metadata": {
                "description": "The current datetime, as a string, to force the request to go through ARM even if all fields are the same as last ARM deployment of this template; example in parameters file is in MM/dd/yyyy H:mm:ss tt format"
            }
        },
        "storageAccountType": {
          "type": "string",
          "allowedValues": [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
            ],
        "metadata": {
            "description": "The type of the Storage Account created"
        },
            "defaultValue": "Premium_LRS"
        },
        "virtualNetworkName": {
          "type": "string",
          "metadata": {
            "description": "Existing Virtual Network"
            }
        },
        "subNetName": {
          "type": "string",
          "defaultValue": "FrontEndSubnet",
          "metadata": {
            "description": "Existing Subnet"
            }
        },
        "DiagnosticsStorageAccountName" : {
          "type": "string",
          "metadata": {
            "description": "Existing Diagnostics Storage Account Name"
            }
        },
        "DeploymentVersion" : {
        "type": "string",
        "defaultValue": "None Specified",
        "metadata": {
            "description" : "What value shall we tag these resources with to indicate what version this is?"
        }
    }
    },
    "variables": {
        "computeApi": "2016-03-30",
        "networkApi": "2016-03-30",
        "storageApi": "2015-06-15",
        "insightsApi": "2015-04-01",
        "automationApiVersion": "2015-10-31",
        "storageAccountType": "[parameters('storageAccountType')]",
        "saCount": "[parameters('instanceCount')]",
        "uniqueStringArray": [
            "[concat(parameters('vmssName'), '0')]",
            "[concat(parameters('vmssName'), '1')]",
            "[concat(parameters('vmssName'), '2')]",
            "[concat(parameters('vmssName'), '3')]",
            "[concat(parameters('vmssName'), '4')]"
        ],
        "vhdContainerName": "[concat(parameters('vmssName'), 'vhd')]",
        "osDiskName": "[concat(parameters('vmssName'), 'osdisk')]",
        "virtualNetworkID": "[resourceId('Microsoft.Network/virtualNetworks/',parameters('virtualNetworkName'))]",
        "subnetID": "[concat(variables('virtualNetworkID'),'/subnets/',parameters('subnetName'))]",
        "publicIPAddressName": "[concat(parameters('vmssName'), 'pip')]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses/',variables('publicIPAddressName'))]",
        "loadBalancerName": "[concat(parameters('vmssName'), 'webtierlb')]",
        "loadBalancerID": "[resourceId('Microsoft.Network/loadBalancers/',variables('loadBalancerName'))]",
        "frontendIPConfigurationsName": "[concat(variables('loadBalancerName'), 'frontendIPConfigurations')]",
        "frontEndIPConfigurationsID": "[concat(variables('loadBalancerID'),'/frontendIPConfigurations/',variables('frontendIPConfigurationsName'))]",
        "loadBalancingRulesName": "[concat(variables('loadBalancerName'), 'loadBalancingRules')]",
        "backendAddressPoolsName":"[concat(variables('loadBalancerName'), 'backendAddressPools')]",
        "backendAddressPoolID": "[concat(variables('loadBalancerID'),'/backendAddressPools/',variables('backendAddressPoolsName'))]",
        "httpProbeName": "[concat(variables('loadBalancerName'),'httpProbe')]",
        "httpProbeID": "[concat(variables('loadBalancerID'),'/probes/',variables('httpProbeName'))]",
        "httpProbeRequestPath": "/iisstart.htm",
        "natRDPPoolName": "[concat(variables('loadBalancerName'), 'natRDP')]",
        "natRDPPoolID": "[concat(variables('loadBalancerID'),'/inboundNatPools/',variables('natRDPPoolName'))]",
        "natRDPStartPort":50000,
        "natRDPEndPort":50119,
        "natRDPBackendPort":3389,
        "natWinRMPoolName": "[concat(variables('loadBalancerName'), 'natWinRM')]",
        "natWinRMPoolID": "[concat(variables('loadBalancerID'),'/inboundNatPools/',variables('natWinRMPoolName'))]",
        "natWinRMStartPort":51000,
        "natWinRMEndPort":51119,
        "natWinRMBackendPort":5896,
        "nicName": "[concat(parameters('vmssName'), 'nic')]",
        "ipConfigName": "[concat(parameters('vmssName'), 'ipconfig')]",
        "osType": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
        },
        "imageReference": "[variables('osType')]",
        "autoScaleWAD": "[concat(parameters('vmssName'), 'autoScale')]",
        "autoscaleProcProfile": "[concat(parameters('vmssName'), 'autoScaleProcProfile')]",
		"diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
		"accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', parameters('DiagnosticsStorageAccountName'))]",
		"wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
		"wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
		"wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
		"wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
		"wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',parameters('vmssName'))]",
		"wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat(variables('uniqueStringArray')[copyIndex()])]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('storageApi')]",
        "copy": {
          "name": "storageLoop",
          "count": "[variables('saCount')]"
        },
        "tags": {
				"DeploymentVersion": "[parameters('DeploymentVersion')]",
                "UniqueId" : "[uniqueString(resourceGroup().id)]"
        },
        "properties": {
          "accountType": "[variables('storageAccountType')]"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('networkApi')]",
        "tags": {
				"DeploymentVersion": "[parameters('DeploymentVersion')]",
                "UniqueId" : "[uniqueString(resourceGroup().id)]"
        },
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[parameters('domainNamePrefix')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[variables('loadBalancerName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('networkApi')]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
        ],
        "tags": {
				"DeploymentVersion": "[parameters('DeploymentVersion')]",
                "UniqueId" : "[uniqueString(resourceGroup().id)]"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "[variables('frontendIPConfigurationsName')]",
              "properties": {
                "publicIPAddress": {
                  "id": "[variables('publicIPAddressID')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('backendAddressPoolsName')]"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "[variables('loadBalancingRulesName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "backendAddressPool": {
                  "id": "[variables('backendAddressPoolID')]"
                },
                "protocol": "tcp",
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('httpProbeID')]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "[variables('httpProbeName')]",
              "properties": {
                "protocol": "http",
                "port": 80,
                "intervalInSeconds": 5,
                "numberOfProbes": 2,
                "requestPath": "[variables('httpProbeRequestPath')]"
              }
            }
          ],
          "inboundNatPools": [
            {
              "name": "[variables('natRDPPoolName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "protocol": "tcp",
                "frontendPortRangeStart": "[variables('natRDPStartPort')]",
                "frontendPortRangeEnd": "[variables('natRDPEndPort')]",
                "backendPort": "[variables('natRDPBackendPort')]"
              }
            },
            {
              "name": "[variables('natWinRMPoolName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('frontEndIPConfigurationsID')]"
                },
                "protocol": "tcp",
                "frontendPortRangeStart": "[variables('natWinRMStartPort')]",
                "frontendPortRangeEnd": "[variables('natWinRMEndPort')]",
                "backendPort": "[variables('natWinRMBackendPort')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[parameters('vmssName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('computeApi')]",
        "dependsOn": [
          "storageLoop",
          "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
        ],
        "sku": {
          "name": "[parameters('vmSku')]",
          "tier": "Standard",
          "capacity": "[parameters('instanceCount')]"
        },
        "tags": {
				"DeploymentVersion": "[parameters('DeploymentVersion')]",
                "UniqueId" : "[uniqueString(resourceGroup().id)]"
        },
        "properties": {
          "overprovision": "true",
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "vhdContainers": [
                  "[concat('https://', variables('uniqueStringArray')[0], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[1], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[2], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[3], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                  "[concat('https://', variables('uniqueStringArray')[4], '.blob.core.windows.net/', variables('vhdContainerName'))]"
                ],
                "name": "[variables('osDiskName')]",
                "caching": "ReadOnly",
                "createOption": "FromImage"
              },
              "imageReference": "[variables('imageReference')]"
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "Microsoft.Powershell.DSC",
                  "properties": {
                    "publisher": "Microsoft.Powershell",
                    "type": "DSC",
                    "typeHandlerVersion": "2.19",
                    "autoUpgradeMinorVersion": true,
                    "protectedSettings": {
                      "Items": {
                        "registrationKeyPrivate": "[parameters('registrationKey')]"
                      }
                    },
                    "settings": {
                      "ModulesUrl": "https://raw.github.com/Azure/azure-quickstart-templates/master/201-vmss-automation-dsc/UpdateLCMforAAPull.zip",
                      "SasToken": "",
                      "ConfigurationFunction": "UpdateLCMforAAPull.ps1\\ConfigureLCMforAAPull",
                      "Properties": [
                        {
                          "Name": "RegistrationKey",
                          "Value": {
                            "UserName": "PLACEHOLDER_DONOTUSE",
                            "Password": "PrivateSettingsRef:registrationKeyPrivate"
                          },
                          "TypeName": "System.Management.Automation.PSCredential"
                        },
                        {
                          "Name": "RegistrationUrl",
                          "Value": "[parameters('registrationUrl')]",
                          "TypeName": "System.String"
                        },
                        {
                          "Name": "NodeConfigurationName",
                          "Value": "[parameters('nodeConfigurationName')]",
                          "TypeName": "System.String"
                        },
                        {
                          "Name": "ConfigurationMode",
                          "Value": "[parameters('configurationMode')]",
                          "TypeName": "System.String"
                        },
                        {
                          "Name": "ConfigurationModeFrequencyMins",
                          "Value": "[parameters('configurationModeFrequencyMins')]",
                          "TypeName": "System.Int32"
                        },
                        {
                          "Name": "RefreshFrequencyMins",
                          "Value": "[parameters('refreshFrequencyMins')]",
                          "TypeName": "System.Int32"
                        },
                        {
                          "Name": "RebootNodeIfNeeded",
                          "Value": "[parameters('rebootNodeIfNeeded')]",
                          "TypeName": "System.Boolean"
                        },
                        {
                          "Name": "ActionAfterReboot",
                          "Value": "[parameters('actionAfterReboot')]",
                          "TypeName": "System.String"
                        },
                        {
                          "Name": "AllowModuleOverwrite",
                          "Value": "[parameters('allowModuleOverwrite')]",
                          "TypeName": "System.Boolean"
                        },
                        {
                          "Name": "Timestamp",
                          "Value": "[parameters('timestamp')]",
                          "TypeName": "System.String"
                        }
                      ]
                    }
                  }
                },
                {
                  "name": "Microsoft.Insights.VMDiagnosticsSettings",
                  "properties": {
                    "publisher": "Microsoft.Azure.Diagnostics",
                    "type": "IaaSDiagnostics",
                    "typeHandlerVersion": "1.5",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                      "storageAccount": "[parameters('vmssName')]"
                    },
                    "protectedSettings": {
                      "storageAccountName": "[parameters('vmssName')]",
                      "storageAccountKey": "[listkeys(variables('accountid'), '2015-06-15').key1]",
                      "storageAccountEndPoint": "https://core.windows.net"
                    }
                  }
                }
              ]
            },
            "osProfile": {
              "computerNamePrefix": "[parameters('vmssName')]",
              "adminUsername": "[parameters('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[variables('nicName')]",
                  "properties": {
                    "primary": "true",
                    "ipConfigurations": [
                      {
                        "name": "[variables('ipConfigName')]",
                        "properties": {
                          "subnet": {
                            "id": "[variables('subnetID')]"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "[variables('backendAddressPoolID')]"
                            }
                          ],
                          "loadBalancerInboundNatPools": [
                            {
                              "id": "[variables('natRDPPoolID')]"
                            },
                            {
                              "id": "[variables('natWinRMPoolID')]"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Insights/autoscaleSettings",
        "apiVersion": "[variables('insightsApi')]",
        "name": "[variables('autoscalewad')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]"
        ],
        "tags": {
				"DeploymentVersion": "[parameters('DeploymentVersion')]",
                "UniqueId" : "[uniqueString(resourceGroup().id)]"
        },
        "properties": {
          "name": "[variables('autoscalewad')]",
          "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]",
          "enabled": true,
          "profiles": [
            {
              "name": "[variables('autoscaleProcProfile')]",
              "capacity": {
                "minimum": "2",
                "maximum": "25",
                "default": "2"
              },
              "rules": [
                {
                  "metricTrigger": {
                    "metricName": "\\Processor(_Total)\\% Processor Time",
                    "metricNamespace": "",
                    "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "GreaterThan",
                    "threshold": 50.0
                  },

                  "scaleAction": {
                    "direction": "Increase",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT1M"
                  }
                },
                {
                  "metricTrigger": {
                    "metricName": "\\Processor(_Total)\\% Processor Time",
                    "metricNamespace": "",
                    "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "LessThan",
                    "threshold": 50.0
                  },

                  "scaleAction": {
                    "direction": "Decrease",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT1M"
                  }
                }
              ]
            }
          ]
        }
      }
    ],
    "outputs": {
		"fqdn": {
			"value": "[reference(variables('publicIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn]",
			"type": "string"
		},
		"ipaddress": {
			"value": "[reference(variables('publicIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).ipAddress]",
			"type": "string"
		}
	}
}